{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2025-09-28T19:25:02.781Z",
    "end": "2025-09-28T19:25:03.296Z",
    "duration": 515,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "dc726660-656a-4fdb-aea0-5ee42993535a",
      "title": "",
      "fullFile": "cypress\\e2e\\proxy_traffic_flow.cy.ts",
      "file": "cypress\\e2e\\proxy_traffic_flow.cy.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f3cce389-2d59-4f4c-91ac-c84fcda22abf",
          "title": "Traffic flows through Proxy (200 OK)",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "returns 200 and includes Kong proxy headers",
              "fullTitle": "Traffic flows through Proxy (200 OK) returns 200 and includes Kong proxy headers",
              "timedOut": null,
              "duration": 402,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const proxyUrl = Cypress.env(\"proxyUrl\");\nconst suffix = Cypress.env(\"suffix\");\ncy.request(`${proxyUrl}${routePath}${suffix}`).then((resp) => {\n    // status\n    expect(resp.status).to.eq(200);\n    // response body (httpbin returns JSON)\n    expect(resp.body).to.have.property('headers');\n    expect(resp.body).to.have.property('url');\n    expect(resp.body.url).to.match(/\\/get$/);\n    // ensure upstream URL contains httpbin\n    expect(resp.body.headers).to.have.property('Host', 'httpbin.konghq.com');\n    // Kong headers\n    const h = resp.headers;\n    expect(h).to.have.property('via');\n    expect(h).to.have.property('x-kong-proxy-latency');\n    expect(h).to.have.property('x-kong-upstream-latency');\n});",
              "err": {},
              "uuid": "c25dc149-2c0a-4684-8817-b9808a8b1ae9",
              "parentUUID": "f3cce389-2d59-4f4c-91ac-c84fcda22abf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c25dc149-2c0a-4684-8817-b9808a8b1ae9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 402,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.4"
    },
    "marge": {
      "options": {
        "reportDir": "reports/mochawesome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.3.0"
    }
  }
}